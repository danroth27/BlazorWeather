@page "/"
@implements IDisposable
@inject IWeatherForecastService WeatherForecastService
@inject PinnedLocationsService PinnedLocationsService

<div id="main" class="@GetBackgroundClass()">
    <div class="weather-now">
        <h1 class="page-title">BLAZOR WEATHER</h1>

        <LocationSearch LocationChanged="LocationChanged" />

        @if (currentWeather == null)
        {
            <p><em>Search for a city, or use your current location.</em></p>
        }
        else
        {
            <div class="pinnable-location">
                <h1>@currentLocation.LocalizedName.ToUpper()</h1>
                <PushPin IsChecked="@currentLocation.IsPinned" IsCheckedChanged="PinLocation" />
            </div>

            <div class="location-carousel">
                <img src="@GetCurrentLocationImage()" />
                @if (ShowPinnedLocations())
                {
                    <img class="previous" src="_content/BlazorWeather.Core/icons/caret-left.svg" @onclick="PreviousPinnedLocation" alt="Previous pinned location" />
                    <img class="next" src="_content/BlazorWeather.Core/icons/caret-right.svg" @onclick="NextPinnedLocation" alt="Next pinned location" />
                }
            </div>

            <div class="temperature">
                @GetTemperature()
                <TemperatureUnitPicker @bind-TemperatureUnit="temperatureUnit" />
            </div>
            <div class="summary">
                <img class="weather-img" src="@currentWeather.WeatherUri" alt="@currentWeather.WeatherText" />
                @currentWeather.WeatherText
            </div>
            <div class="update-info">Updated @GetTimeToDisplay()</div>
            <div class="metrics">
                <div>UV index <p>@currentWeather.UVIndex</p></div>
                <div>Barometer <p>@currentWeather.Pressure</p></div>
                <div>Humidity <p>@currentWeather.RelativeHumidity%</p></div>
                <div>Wind <p>@currentWeather.WindSpeed <span class="wind-details">mph @currentWeather.WindDirection</span></p></div>
            </div>
        }
    </div>
</div>

@code {
    WeatherResponse currentWeather;
    string temperatureUnit = "F";
    Location currentLocation;
    IList<Location> pinnedLocations;
    int pinnedLocationIndex;

    CancellationTokenSource streamingWeatherCTS = new CancellationTokenSource();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            pinnedLocations = await PinnedLocationsService.LoadPinnedLocations();
            currentLocation = pinnedLocations.FirstOrDefault();
            if (currentLocation != null)
            {
                _ = GetWeatherUpdates();
            }
        }
    }

    async Task GetWeatherUpdates()
    {
        await foreach (var weatherResponse in WeatherForecastService.GetStreamingWeather(currentLocation.Key, streamingWeatherCTS.Token))
        {
            currentWeather = weatherResponse;
            StateHasChanged();
        }
    }

    void LocationChanged(Location newLocation)
    {
        currentLocation = pinnedLocations.FirstOrDefault(l => l.Key == newLocation.Key) ?? newLocation;
        streamingWeatherCTS.Cancel();
        streamingWeatherCTS.Dispose();
        streamingWeatherCTS = new CancellationTokenSource();
        _ = GetWeatherUpdates();
    }

    async Task PinLocation(ChangeEventArgs e)
    {
        currentLocation.IsPinned = (bool)e.Value;
        if (currentLocation.IsPinned)
        {
            pinnedLocations.Add(currentLocation);
            pinnedLocationIndex = pinnedLocations.Count() - 1;
        }
        else
        {
            pinnedLocations.Remove(currentLocation);
        }
        await PinnedLocationsService.SavePinnedLocations(pinnedLocations);
    }

    bool ShowPinnedLocations() => pinnedLocations.Any() && !currentLocation.IsPinned || pinnedLocations.Count() > 1;

    void NextPinnedLocation()
    {
        pinnedLocationIndex = (pinnedLocationIndex + 1) % pinnedLocations.Count();
        LocationChanged(pinnedLocations[pinnedLocationIndex]);
    }

    void PreviousPinnedLocation()
    {
        int count = pinnedLocations.Count();
        pinnedLocationIndex = (pinnedLocationIndex + count - 1) % count;
        LocationChanged(pinnedLocations[pinnedLocationIndex]);
    }

    string GetBackgroundClass()
    {
        if (currentWeather == null)
        {
            return "warm";
        }
        else if (!currentWeather.IsDayTime)
        {
            return "night";
        }
        else if (currentWeather.Temperature > 60)
        {
            return "warm";
        }
        else
        {
            return "cold";
        }
    }

    void SwitchTemperatureUnit() => temperatureUnit = temperatureUnit == "F" ? "C" : "F";

    float GetTemperature()
        => temperatureUnit == "F" ? currentWeather.Temperature : TemperatureAsCelsius(currentWeather.Temperature);

    float TemperatureAsCelsius(float f) => (float)Math.Round((f - 23f) / 1.8f);

    string GetTimeToDisplay()
        => currentWeather.RetrievedTime.ToLocalTime().ToString("T");

    string GetCurrentLocationImage()
    {
        switch (currentLocation.AdministrativeArea.ID)
        {
            case "WA":
            case "NY":
            case "MO":
            case "IL":
            case "HI":
                return $"_content/BlazorWeather.Core/images/locations/{currentLocation.AdministrativeArea.ID}.png";
            default:
                return "_content/BlazorWeather.Core/images/locations/wa.png";
        }
    }

    void IDisposable.Dispose()
    {
        streamingWeatherCTS.Cancel();
    }
}

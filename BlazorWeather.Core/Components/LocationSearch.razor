@inject IWeatherForecastService WeatherForecastService
@inject GeolocationService GeolocationService
@using System.Threading.Tasks

<div>
    <img class="@GetSearchClass()" src="@GetSearchIcon()" />
    <input class="search" list="locations" @bind="@SearchQuery" @bind:event="oninput" @onchange="LocationSelected" placeholder="US city..." autocomplete="off" spellcheck="false" />
    <img class="current-location" src="_content/BlazorWeather.Core/icons/target.svg" @onclick="GetLocalWeather" />
</div>

<datalist id="locations">
    @foreach (var location in locations.Take(10))
    {
        <option value="@CityState(location)"></option>
    }
</datalist>

<p>
@if (noResults)
{
    <span>No results.</span>
}
</p>

@code {
    string searchQuery;
    bool isSearching;
    CancellationTokenSource currentSearchCts;
    Location[] locations = new Location[0];
    bool noResults;

    string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            if (!string.IsNullOrEmpty(searchQuery))
            {
                _ = SearchDebounced(searchQuery);
            }
        }
    }

    bool IsSearching => isSearching || currentSearchCts != null;

    [Parameter]
    public EventCallback<Location> LocationChanged { get; set; }

    async Task GetLocalWeather()
    {
        isSearching = true;
        var geolocation = await GeolocationService.GetLocationAsync();
        var currentLocation = await WeatherForecastService.GetLocationByGeolocation(geolocation.Latitude, geolocation.Longitude);
        isSearching = false;
        await LocationChanged.InvokeAsync(currentLocation);
    }

    async Task SearchDebounced(string query)
    {
        try
        {
            // Cancel any existing pending search, and begin a new one
            noResults = false;
            currentSearchCts?.Cancel();
            currentSearchCts = new CancellationTokenSource();
            var cancellationToken = currentSearchCts.Token;

            await Task.Delay(500);
            if (!cancellationToken.IsCancellationRequested)
            {
                var results = await WeatherForecastService.GetLocationsByText(query, cancellationToken);
                if (!cancellationToken.IsCancellationRequested)
                {
                    locations = results;
                    noResults = locations.Length == 0;
                    currentSearchCts = null;
                }
            }

            StateHasChanged();
        }
        catch (OperationCanceledException) { }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.StackTrace);
        }
    }

    void LocationSelected(ChangeEventArgs e)
    {
        var locationName = (string)e.Value;
        var selectedLocation = locations.FirstOrDefault(l => CityState(l) == locationName);
        if (selectedLocation != null)
        {
            searchQuery = null;
            noResults = false;
            locations = new Location[0];
            LocationChanged.InvokeAsync(selectedLocation);
        }
    }

    string CityState(Location location) => $"{location.LocalizedName}, {location.AdministrativeArea.ID}";

    string GetSearchClass() => IsSearching ? "search-icon spinning" : "search-icon";

    string GetSearchIcon() => IsSearching ? "_content/BlazorWeather.Core/icons/loop-circular.svg" : "_content/BlazorWeather.Core/icons/magnifying-glass.svg";
}
